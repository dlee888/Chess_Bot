#include "psqt.h"

#define S(mg, eg) make_score(mg, eg)

// Symmetric distributions
// piece_bonus[x][row][col] if piece is white
Score piece_bonus[][8][4] = {
	{},
	{},
	{ // Knight
	 { S(-129,-105), S(-96,-74), S(-80,-46), S(-69,-18) },
	 { S( -79, -70), S(-39,-56), S(-24,-15), S( -9,  6) },
	 { S( -54, -38), S(-20,-33), S( 14, -5), S( 19, 27) },
	 { S( -28, -36), S(  5,  0), S( 28, 13), S( 32, 34) },
	 { S( -29, -41), S( 13,-20), S( 32,  4), S( 25, 35) },
	 { S( -11, -51), S( 18,-38), S( 53,-17), S( 35, 19) },
	 { S( -37, -64), S( -1,-45), S(  6,-37), S( 43, 16) },
	 { S(-100, -98), S(-69,-89), S(-53,-53), S(  2,-16) }
	},
	{ // Bishop
	 { S(-44,-63), S( -4,-30), S(-11,-35), S(-28, -8) },
	 { S(-18,-38), S(  7,-13), S( 14,-14), S(  3,  0) },
	 { S( -8,-18), S( 24,  0), S( -3, -7), S( 15, 13) },
	 { S(  1,-26), S( 38, -3), S( 26,  1), S( 21, 16) },
	 { S( -7,-24), S( 30, -6), S( 23,-10), S( 18, 17) },
	 { S(-17,-26), S( 10,  2), S( -1,  1), S( 18, 16) },
	 { S(-21,-34), S( 13,-18), S( 10, -7), S(  6,  9) },
	 { S(-28,-51), S(-27,-40), S(-25,-39), S(-15,-20) }
	},
	{ // Rook
	 { S(  5, -2), S(  3,-6), S(  3, -3), S( 2,-2) },
	 { S( 15,  0), S( 17,-7), S( 20,  1), S(21, 0) },
	 { S( 13, 10), S(  7,-4), S(  3,  2), S(-1,-2) },
	 { S( 10,  5), S( -5, 2), S( -4, -8), S(-6, 8) },
	 { S( 10,  8), S(  4, 5), S( -1,  4), S( 6,-9) },
	 { S( 10,  3), S(  4,-2), S(  4,-10), S( 0, 7) },
	 { S(-24,  1), S(-26, 2), S( -2, 17), S(-8,-8) },
	 { S(-22, 12), S(-24,-6), S(  3, 13), S( 7, 7) }
	},
	{ // Queen
	 { S( 3,-69), S(-5,-57), S(-5,-47), S( 4,-26) },
	 { S(-3,-55), S( 5,-31), S( 8,-22), S(12, -4) },
	 { S(-3,-39), S( 6,-18), S(13, -9), S( 7,  3) },
	 { S( 4,-23), S( 5, -3), S( 9, 13), S( 8, 24) },
	 { S( 0,-29), S(14, -6), S(12,  9), S( 5, 21) },
	 { S(-4,-38), S(10,-18), S( 6,-12), S( 8,  1) },
	 { S(-5,-50), S( 6,-27), S(15,-24), S( 8, -8) },
	 { S(-2,-75), S(-2,-52), S( 1,-43), S(-2,-36) }
	},
	{ // King
	 { S( 64,  5), S( 87, 60), S( 49, 75), S(  0, 75) },
	 { S( 87, 40), S(120, 99), S( 64,128), S( 25,141) },
	 { S(122, 87), S(159,164), S( 85,174), S( 36,189) },
	 { S(145, 98), S(176,166), S(112,197), S( 69,194) },
	 { S(169,103), S(191,152), S(136,168), S(108,175) },
	 { S(198, 86), S(223,138), S(168,165), S(120,173) },
	 { S(277, 57), S(285, 98), S(221,138), S(183,131) },
	 { S(295,  0), S(325, 41), S(283, 80), S(220, 93) },
	}
};

Score pawn_bonus[8][8] =
{ // Pawn (asymmetric distribution)
	 { },
	 { S(  7, 25), S(  7, 21), S( -3, 22), S( 13, 21), S(  5, 25), S( -6, 25), S( 10, 14), S(  8, 13) },
	 { S(  5, 28), S(  2, 20), S( -7, 21), S( 22, 28), S( 13, 30), S( -5, 14), S(-15,  6), S(  3, 13) },
	 { S( 10,  9), S(  0,  4), S(  3,  3), S( 25, 12), S( 25, 12), S(  5,  6), S(-30, 13), S(  0,  8) },
	 { S( -8,  6), S(-18, -2), S( 18, -5), S( 40, -4), S( 40,-13), S( 13,  4), S(-35, -5), S( -9, -9) },
	 { S( -9,-10), S(  7,-10), S( 21, -8), S( 25,  4), S( 25,  4), S(  4,  2), S( 13, -6), S( 20, -4) },
	 { S(  3,-10), S(  3,-16), S( 10,-10), S( 19,  0), S( 16, 14), S( 19, -5), S( 32, -5), S( 25,-19) },
	 {}
};
#undef S

Score get_psqt(int piece, int row, int col) {
	int color = 1;
	if (piece < 0) {
		piece = -piece;
		color = -1;
		row = 7 - row;
	}
	if (piece == WP) {
		return color * pawn_bonus[row][col];
	} else {
		if (col >= 4) {
			col = 7 - col;
		}
		return color * piece_bonus[piece][row][col];
	}
}